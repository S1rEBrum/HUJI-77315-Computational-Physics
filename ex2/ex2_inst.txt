Ex. 2
===================================================================
Compare linear interpolation, Lagrange4 interpolation and Hermit4 interpolation.
Write function: interp(x,y,x1,itype)
where x is an ordered one-dimensional numpy array of size n
     y is one-dimensional numpy array of the same size
     x1 is a number larger than x[0] and smaller than x[n-1]
     itype is either 'Linear', 'Lagrange4' or 'Hermit4'.
The function returns the "y" value of x1 according to the requested type of interpolation.
ATTENTION:
     because both Lagrange4 and Hermit4(as should be implemented here) needs 2 points
     smaller than x and 2 points larger than x, 
     then if x < x[1] or x > x[n-2] return y[1] or y[n-2] accordingly.

Use the following lines to initialize the arrays 
(x is not equally spaced 1-dimensional array starting from 0 to 100.
 It's the sum of two 1-D arrays, 
 the first is equally spaced from 1 to 99 with difference of 1 
 and the second consists of 99 random numbers in the range of -1/3 to +1/3):
-------------------------------------------------------------------
import numpy as np
npoints = 101
xmax = 10.
np.random.seed(12345)
x = np.arange(npoints,dtype="float64")
x[npoints-1] = xmax
r = np.random.rand(npoints-2)
x[1:npoints-1] = (x[1:npoints-1] + (r[0:npoints-2]-0.5)/1.5) * xmax/(npoints-1)
y=np.sin(x)
ntests = 10
x_test = np.random.rand(ntests) * xmax
-------------------------------------------------------------------

x_test is one-dimensional numpy array of size 10 that holds test points for the interpolations
Compare 'Linear', 'Lagrange4' or 'Hermit4' interpolations using commans like the following,
which are given for linear interpolation:

-------------------------------------------------------------------
y_interp=np.zeros(ntests)
for i in range(ntests):
    y_interp[i]=interp(x,y,x_test[i],'Linear')
-------------------------------------------------------------------

Use the following function for printout of each type of interpolation:

-------------------------------------------------------------------
def print_out(xv,yv):
    print('%18s %12.4e' % ('max. error was:',np.amax(np.abs(yv-np.sin(xv)))))
    print('%12s %12s %12s' % ('test_x', 'y_interp', 'error'))
    for i in range(ntests):
        print('%12.4e %12.4e %12.4e' % (xv[i], yv[i], yv[i]-np.sin(xv[i])))
    return
-------------------------------------------------------------------

Compare the 3 interpolations for more sparse table by using commands like
y_interp[i]=interp(x[0:npoints:2],y[0:npoints:2],x_test[i],'Linear')
Compare also table smaller by a factor of 4

Submit code and output.
Add explanations of the results.
HINT: Hermit interpolation uses derivatives which are not given in the table. Use 3-point difference formula
to calculate it numerically. Pay attention that the table is NOT equally spaced - use Taylor series expantion
to derive the wright formula with minimal error!!!
